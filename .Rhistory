runApp()
runApp()
combo
combo$GEOID
combo$AFFGEOID
runApp()
runApp()
runApp()
for (ele in colnames(data)){
print(plot_geo(data, locationmode = 'USA-states') %>%
add_trace(
z = eval(parse(text=paste0("data$",ele))), locations = as.character(bb2state(data$State, convert = T)),
color = eval(parse(text=paste0("data$",ele))), colors = 'Reds') %>%
layout(
title = ele,
geo = g
))
}
surpriseData <- c()
startYear <- 1981
bb2state <- function(name, convert = F, strict = F){
data(state)
# state data doesn't include DC
state = list()
state[['name']] = c(state.name,"District Of Columbia")
state[['abb']] = c(state.abb,"DC")
if(convert) state[c(1,2)] = state[c(2,1)]
single.a2s <- function(s){
if(strict){
is.in = tolower(state[['abb']]) %in% tolower(s)
ifelse(any(is.in), state[['name']][is.in], NA)
}else{
# To check if input is in state full name or abb
is.in = rapply(state, function(x) tolower(x) %in% tolower(s), how="list")
state[['name']][is.in[[ifelse(any(is.in[['name']]), 'name', 'abb')]]]
}
}
sapply(name, single.a2s)
}
setwd("~/Documents/Projects/SuRpriseMaps")
data <- read.csv("data.csv")
pMs = c(.333,.333,.333)
pMDs = c()
pDMs = c()
diffs = c()
sumDiffs = c()
overallSurprise <- matrix(17,50)
boomYear <- data$X1998
bustYear <- data$X1981
bustYear
year <- startYear + i
yearMean <- mean(eval(parse(text=paste0("data$X",year))))
yearSum  <- sum(eval(parse(text=paste0("data$X",year))))
yearData <- eval(parse(text=paste0("data$X",year)))
yearData
yearSum
nrow(data)
prop <- 1
state <- eval(parse(text=paste0("data[prop,]$X",year)))
state
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
pDMs[1] = 1 - abs(diffs[1])
pDMs
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
pDMs[2] = 1 - abs(diffs[2])
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
pDMs[3] = 1 - abs(diffs[3])
pMDs[1] = pMs[1]*pDMs[1]
pMDs[2] = pMs[2]*pDMs[2]
pMDs[3] = pMs[3]*pDMs[3]
pMDs
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
sumDiffs
sumDiffs = c()
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
sumDiffs = c()
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
sumDiffs
length(pMDs)
j <- 1
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
k1
kl
voteSum  = voteSum + (diffs[j]*pMs[j])
voteSum
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
sumDiffs
j
diffs = c(0,0,0)
sumDiffs = c(0,0,0)
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
sumDiffs
diffs[j]
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
diffs
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
voteSum  = voteSum + (diffs[j]*pMs[j])
voteSum
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
sumDiffs
stateName <- data[prop,]$State
stateName
voteSum
val <- c(val, (-1* abs(kl)))
val
pMs = c(.333,.333,.333)
pMDs = c()
pDMs = c()
diffs = c(0,0,0)
overallSurprise <- matrix(18,50)
boomYear <- data$X1998
bustYear <- data$X1981
surpriseData <- c()
startYear <- 1981
pMs = c(.333,.333,.333)
pMDs = c()
pDMs = c()
diffs = c(0,0,0)
val <- c()
prop <- 1
state <- eval(parse(text=paste0("data[prop,]$X",year)))
yearMean <- mean(eval(parse(text=paste0("data$X",year))))
yearSum  <- sum(eval(parse(text=paste0("data$X",year))))
yearData <- eval(parse(text=paste0("data$X",year)))
year
year <- startYear + i
year
startYear <- 1981
i
i<- 0
state
state <- eval(parse(text=paste0("data[prop,]$X",year)))
state
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
diffs[1]
pDMs[1] = 1 - abs(diffs[1])
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
pDMs[2] = 1 - abs(diffs[2])
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
pDMs[3] = 1 - abs(diffs[3])
diffs
pMDs[1] = pMs[1]*pDMs[1]
pMDs[2] = pMs[2]*pDMs[2]
pMDs[3] = pMs[3]*pDMs[3]
pMDs
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
voteSum
sumDiffs
i
for(prop in 1:nrow(data)){
state <- eval(parse(text=paste0("data[prop,]$X",year)))
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
pDMs[1] = 1 - abs(diffs[1])
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
pDMs[2] = 1 - abs(diffs[2])
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
pDMs[3] = 1 - abs(diffs[3])
pMDs[1] = pMs[1]*pDMs[1]
pMDs[2] = pMs[2]*pDMs[2]
pMDs[3] = pMs[3]*pDMs[3]
kl = 0
voteSum = 0;
sumDiffs = c(0,0,0)
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
stateName <- data[prop,]$State
stateAbb <- state.abb[grep(stateName, state.name)]
if (stateName == 'District of Columbia'){
stateAbb <- 'DC'
}
if (stateName == 'Puerto Rico'){
stateAbb <- 'PC'
}
if(voteSum >= 0 ){
val <- c(val,abs(kl))
}
else{
val <- c(val, (-1* abs(kl)))
}
}
overallSurprise[i] <- list(val)
overallSurprise
overallSurprise[1]
overallSurprise[1][[1]]
overallSurprise[1][[1]]
overallSurprise = c()
year
year <- 1981
i
year <- startYear + i
year
yearMean <- mean(eval(parse(text=paste0("data$X",year))))
yearSum  <- sum(eval(parse(text=paste0("data$X",year))))
yearData <- eval(parse(text=paste0("data$X",year)))
for(prop in 1:nrow(data)){
state <- eval(parse(text=paste0("data[prop,]$X",year)))
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
pDMs[1] = 1 - abs(diffs[1])
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
pDMs[2] = 1 - abs(diffs[2])
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
pDMs[3] = 1 - abs(diffs[3])
pMDs[1] = pMs[1]*pDMs[1]
pMDs[2] = pMs[2]*pDMs[2]
pMDs[3] = pMs[3]*pDMs[3]
kl = 0
voteSum = 0;
sumDiffs = c(0,0,0)
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
stateName <- data[prop,]$State
stateAbb <- state.abb[grep(stateName, state.name)]
if (stateName == 'District of Columbia'){
stateAbb <- 'DC'
}
if (stateName == 'Puerto Rico'){
stateAbb <- 'PC'
}
if(voteSum >= 0 ){
val <- c(val,abs(kl))
}
else{
val <- c(val, (-1* abs(kl)))
}
}
val
overallSurprise[i] <- list(val)
overallSurprise
overallSurprise[1]
i
overallSurprise[i+1] <- list(val)
overallSurprise
pMs
pMs
for(k in 1:3){
print("test")
}
pMs
for(k in 1:3){
pDMs[k] = 1 - (0.5 * sumDiffs[k]);
pMDs[k] = pMs[k] * pDMs[k];
pMs[k] = pMDs[k];
}
pMs
sumDiffs
sum(sumDiffs)
pMs
sum = sum(sumDiffs)
for(j in 1:3){
pMs[j] = pMs[j]/sum
}
pMs
sum
sum
boomYear <- data$X1998
bustYear <- data$X1981
val <- c()
year <- startYear + i
year
yearMean <- mean(eval(parse(text=paste0("data$X",year))))
yearSum  <- sum(eval(parse(text=paste0("data$X",year))))
yearData <- eval(parse(text=paste0("data$X",year)))
for(prop in 1:nrow(data)){
state <- eval(parse(text=paste0("data[prop,]$X",year)))
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
pDMs[1] = 1 - abs(diffs[1])
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
pDMs[2] = 1 - abs(diffs[2])
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
pDMs[3] = 1 - abs(diffs[3])
pMDs[1] = pMs[1]*pDMs[1]
pMDs[2] = pMs[2]*pDMs[2]
pMDs[3] = pMs[3]*pDMs[3]
kl = 0
voteSum = 0;
sumDiffs = c(0,0,0)
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
stateName <- data[prop,]$State
stateAbb <- state.abb[grep(stateName, state.name)]
if (stateName == 'District of Columbia'){
stateAbb <- 'DC'
}
if (stateName == 'Puerto Rico'){
stateAbb <- 'PC'
}
if(voteSum >= 0 ){
val <- c(val,abs(kl))
}
else{
val <- c(val, (-1* abs(kl)))
}
}
val
pMs
pMs = c(.333,.333,.333)
pMDs = c()
pDMs = c()
diffs = c(0,0,0)
for(prop in 1:nrow(data)){
state <- eval(parse(text=paste0("data[prop,]$X",year)))
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
pDMs[1] = 1 - abs(diffs[1])
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
pDMs[2] = 1 - abs(diffs[2])
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
pDMs[3] = 1 - abs(diffs[3])
pMDs[1] = pMs[1]*pDMs[1]
pMDs[2] = pMs[2]*pDMs[2]
pMDs[3] = pMs[3]*pDMs[3]
kl = 0
voteSum = 0;
sumDiffs = c(0,0,0)
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
stateName <- data[prop,]$State
stateAbb <- state.abb[grep(stateName, state.name)]
if (stateName == 'District of Columbia'){
stateAbb <- 'DC'
}
if (stateName == 'Puerto Rico'){
stateAbb <- 'PC'
}
if(voteSum >= 0 ){
val <- c(val,abs(kl))
}
else{
val <- c(val, (-1* abs(kl)))
}
}
val
pMs
for(k in 1:3){
pDMs[k] = 1 - (0.5 * sumDiffs[k]);
pMDs[k] = pMs[k] * pDMs[k];
pMs[k] = pMDs[k];
}
pMs
pMs
sum = sum(pMs)
sum
for(j in 1:3){
pMs[j] = pMs[j]/sum
}
pMs
for (ele in colnames(data)){
print(plot_geo(data, locationmode = 'USA-states') %>%
add_trace(
z = eval(parse(text=paste0("data$",ele))), locations = as.character(bb2state(data$State, convert = T)),
color = eval(parse(text=paste0("data$",ele))), colors = 'Reds') %>%
layout(
title = ele,
geo = g
))
}
surpriseData <- c()
startYear <- 1981
pMs = c(.333,.333,.333)
pMDs = c()
pDMs = c()
diffs = c(0,0,0)
overallSurprise <- matrix(18,50)
boomYear <- data$X1998
bustYear <- data$X1981
for(i in 0:17) {
val <- c()
year <- startYear + i
yearMean <- mean(eval(parse(text=paste0("data$X",year))))
yearSum  <- sum(eval(parse(text=paste0("data$X",year))))
yearData <- eval(parse(text=paste0("data$X",year)))
for(prop in 1:nrow(data)){
state <- eval(parse(text=paste0("data[prop,]$X",year)))
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
pDMs[1] = 1 - abs(diffs[1])
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
pDMs[2] = 1 - abs(diffs[2])
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
pDMs[3] = 1 - abs(diffs[3])
pMDs[1] = pMs[1]*pDMs[1]
pMDs[2] = pMs[2]*pDMs[2]
pMDs[3] = pMs[3]*pDMs[3]
kl = 0
voteSum = 0;
sumDiffs = c(0,0,0)
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
stateName <- data[prop,]$State
stateAbb <- state.abb[grep(stateName, state.name)]
if (stateName == 'District of Columbia'){
stateAbb <- 'DC'
}
if (stateName == 'Puerto Rico'){
stateAbb <- 'PC'
}
if(voteSum >= 0 ){
val <- c(val,abs(kl))
}
else{
val <- c(val, (-1* abs(kl)))
}
}
overallSurprise[i+1] <- list(val)
for(k in 1:3){
pDMs[k] = 1 - (0.5 * sumDiffs[k]);
pMDs[k] = pMs[k] * pDMs[k];
pMs[k] = pMDs[k];
}
sum = sum(pMs)
for(j in 1:3){
pMs[j] = pMs[j]/sum
}
#uniform.pM.push(pMs[0]);
#boom.pM.push(pMs[1]);
#bust.pM.push(pMs[2]);
}
overallSurprise
overallSurprise <- matrix(18,50)
for(i in 0:17) {
val <- c()
year <- startYear + i
yearMean <- mean(eval(parse(text=paste0("data$X",year))))
yearSum  <- sum(eval(parse(text=paste0("data$X",year))))
yearData <- eval(parse(text=paste0("data$X",year)))
for(prop in 1:nrow(data)){
state <- eval(parse(text=paste0("data[prop,]$X",year)))
diffs[1] <- (state/yearSum) - (yearMean/yearSum)
pDMs[1] = 1 - abs(diffs[1])
diffs[2] =  (state/yearSum) - (boomYear[prop]/yearSum)
pDMs[2] = 1 - abs(diffs[2])
diffs[3] =  (state/yearSum) - (bustYear[prop]/yearSum)
pDMs[3] = 1 - abs(diffs[3])
pMDs[1] = pMs[1]*pDMs[1]
pMDs[2] = pMs[2]*pDMs[2]
pMDs[3] = pMs[3]*pDMs[3]
kl = 0
voteSum = 0;
sumDiffs = c(0,0,0)
for(j in 1:length(pMDs)){
kl <-  kl + (pMDs[j] * (log( pMDs[j] / pMs[j]) / log(2)));
voteSum  = voteSum + (diffs[j]*pMs[j])
sumDiffs[j] = sumDiffs[j] + (abs(diffs[j]))
}
stateName <- data[prop,]$State
stateAbb <- state.abb[grep(stateName, state.name)]
if (stateName == 'District of Columbia'){
stateAbb <- 'DC'
}
if (stateName == 'Puerto Rico'){
stateAbb <- 'PC'
}
if(voteSum >= 0 ){
val <- c(val,abs(kl))
}
else{
val <- c(val, (-1* abs(kl)))
}
}
overallSurprise[i+1] <- list(val)
for(k in 1:3){
pDMs[k] = 1 - (0.5 * sumDiffs[k]);
pMDs[k] = pMs[k] * pDMs[k];
pMs[k] = pMDs[k];
}
sum = sum(pMs)
for(j in 1:3){
pMs[j] = pMs[j]/sum
}
#uniform.pM.push(pMs[0]);
#boom.pM.push(pMs[1]);
#bust.pM.push(pMs[2]);
}
overallSurprise
map_data <- readRDS("surprise_map_data.RDS")
map_data
for(val in 0:17){
eval(parse(text=paste0("statepop$X",val+1981," <- overallSurprise[",val+1,"][[1]][1:51]")))
}
statepop$X1998
saveRDS(statepop, "surprise_map_data.RDS")
runApp()
