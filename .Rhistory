lon <- c(36.2989,36.3597)
southwest <- openmap(c(lat[1],lon[1]),c(lat[2],lon[2]),zoom=10,'osm')
plot(southwest)
library(OpenStreetMap)
library(rgdal)
lat <- c(32.3143,32.2630)
lon <- c(36.2989,36.3597)
southwest <- openmap(c(lat[1],lon[1]),c(lat[2],lon[2]),zoom=5,'osm')
plot(southwest)
library(OpenStreetMap)
library(rgdal)
lat <- c(32.3143,32.2630)
lon <- c(36.2989,36.3597)
southwest <- openmap(c(lat[1],lon[1]),c(lat[2],lon[2]),zoom=15,'osm')
plot(southwest)
library(dplyr)
library(tidyr)
library(Lahman)
career <- Batting %>%
filter(AB > 0) %>%
anti_join(Pitching, by = "playerID") %>%
group_by(playerID) %>%
summarize(H = sum(H), AB = sum(AB)) %>%
mutate(average = H / AB)
career <- Master %>%
tbl_df() %>%
select(playerID, nameFirst, nameLast) %>%
unite(name, nameFirst, nameLast, sep = " ") %>%
inner_join(career, by = "playerID")
career_filtered <- career %>% filter(AB >= 500)
m <- MASS::fitdistr(career_filtered$average, dbeta,
start = list(shape1 = 1, shape2 = 10))
alpha0 <- m$estimate[1]
beta0 <- m$estimate[2]
career_eb <- career %>%
mutate(eb_estimate = (H + alpha0) / (AB + alpha0 + beta0)) %>%
mutate(alpha1 = H + alpha0,
beta1 = AB - H + beta0)
career_eb %>% filter(name == "Hank Aaron")
pbeta(.3, 3850, 8818)
career_eb <- career_eb %>%
mutate(PEP = pbeta(.3, alpha1, beta1))
top_players <- career_eb %>%
arrange(PEP) %>%
head(100)
top_players
sum(top_players$PEP)
mean(top_players$PEP)
sorted_PEP <- career_eb %>%
arrange(PEP)
mean(head(sorted_PEP$PEP, 50))
career_eb <- career_eb %>%
arrange(PEP) %>%
mutate(qvalue = cummean(PEP))
hall_of_fame <- career_eb %>%
filter(qvalue < .05)
hall_of_fame
library(dplyr)
library(tidyr)
library(Lahman)
# Grab career batting average of non-pitchers
# (allow players that have pitched <= 3 games, like Ty Cobb)
pitchers <- Pitching %>%
group_by(playerID) %>%
summarize(gamesPitched = sum(G)) %>%
filter(gamesPitched > 3)
career <- Batting %>%
filter(AB > 0) %>%
anti_join(pitchers, by = "playerID") %>%
group_by(playerID) %>%
summarize(H = sum(H), AB = sum(AB)) %>%
mutate(average = H / AB)
# Add player names
career <- Master %>%
tbl_df() %>%
select(playerID, nameFirst, nameLast) %>%
unite(name, nameFirst, nameLast, sep = " ") %>%
inner_join(career, by = "playerID")
# Estimate hyperparameters alpha0 and beta0 for empirical Bayes
career_filtered <- career %>% filter(AB >= 500)
m <- MASS::fitdistr(career_filtered$average, dbeta,
start = list(shape1 = 1, shape2 = 10))
alpha0 <- m$estimate[1]
beta0 <- m$estimate[2]
# For each player, update the beta prior based on the evidence
# to get posterior parameters alpha1 and beta1
career_eb <- career %>%
mutate(eb_estimate = (H + alpha0) / (AB + alpha0 + beta0)) %>%
mutate(alpha1 = H + alpha0,
beta1 = AB - H + beta0) %>%
arrange(desc(eb_estimate))
aaron <- career_eb %>% filter(name == "Hank Aaron")
piazza <- career_eb %>% filter(name == "Mike Piazza")
two_players <- bind_rows(aaron, piazza)
two_players
library(broom)
library(ggplot2)
theme_set(theme_bw())
two_players %>%
inflate(x = seq(.28, .33, .00025)) %>%
mutate(density = dbeta(x, alpha1, beta1)) %>%
ggplot(aes(x, density, color = name)) +
geom_line() +
labs(x = "Batting average", color = "")
piazza_simulation <- rbeta(1e6, piazza$alpha1, piazza$beta1)
aaron_simulation <- rbeta(1e6, aaron$alpha1, aaron$beta1)
sim <- mean(piazza_simulation > aaron_simulation)
sim
d <- .00002
limits <- seq(.29, .33, d)
sum(outer(limits, limits, function(x, y) {
(x > y) *
dbeta(x, piazza$alpha1, piazza$beta1) *
dbeta(y, aaron$alpha1, aaron$beta1) *
d ^ 2
}))
install.packages("gamlss")
shiny::runApp('Documents/Capstone/Zaatari-Project/map')
shiny::runApp('Documents/Capstone/Zaatari-Project/map')
runApp('Documents/Capstone/Zaatari-Project/map')
runApp('Documents/Capstone/Zaatari-Project/map')
asset
asset$work_business.plan_business.musician
asset$work_business.plan_business.musician[1]
typeof(asset$work_business.plan_business.musician[1])
typeof(asset)
str(asset)
str(asset)["education_skills.skills.pr"]
str(asset)$education_skills.skills.pr
lappy(asset,class)
lapply(asset,class)
lapply(asset,typeof)
lapply(asset,class)
lapply(str(asset),class)
lapply(asset,class)
levels()
levels(asset)
level(asset)
asset
levels(asset)
class(asset$activities_hobbies_social.community_activity.tiger_girls)
class(asset$activities_hobbies_social.community_activity.tiger_girls[1])
levels(asset$activities_hobbies_social.community_activity.tiger_girls)
levels(asset$activities_hobbies_social.community_activity.tiger_girls)[1]
typeof(levels(asset$activities_hobbies_social.community_activity.tiger_girls)[1])
runApp('Documents/Capstone/Zaatari-Project/map')
typeof(levels(asset$activities_hobbies_social.community_activity.tiger_girls)[1])
levels
levels(asset)
levels(assets)
levels(asset)
names
names(assets)
names(asset)
levels(names(asset))
sapply(names(asset), levels)
lapply(names(asset), levels)
lapply(names(asset)[1], levels)
names(asset)
names(asset)[1]
lapply(names(asset), levels)
names(asset)
names(asset)[1]
eval(parse(text = names(asset)[1]))
eval(parse(text = names(asset)))
eval(parse(text = paste0("asset",names(asset)))
)
eval(parse(text = paste0("asset$",names(asset))))
lapply(eval(parse(text = paste0("asset$",names(asset))),typeof)
)
lapply(eval(parse(text = paste0("asset$",names(asset)))),typeof)
lapply(eval(parse(text = paste0("asset$",names(asset)))),typeof)
paste0("asset$",names(asset)
)
paste0("asset$",names(asset))
paste0("asset$",names(asset))
asset$participation.respondent_repeat.15..sex
levels(asset$participation.respondent_repeat.15..sex)
paste0("levels(asset$",names(asset),")")
lapply(eval(parse(text = paste0("levels(asset$",names(asset),")"))),typeof)
lapply(eval(parse(text = paste0("levels(asset$",names(asset),")"))),typeof)
lapply(eval(parse(text = paste0("levels(asset$",names(asset),")"))),typeof)
for(ele in names(asset)){}
for(ele in names(asset)){ print(ele)}
for(ele in names(asset)){
eval(parse(text = paste0("levels(asset$",names(asset),")")))
}
for(ele in names(asset)){
print(eval(parse(text = paste0("levels(asset$",names(asset),")"))))
}
for(ele in names(asset)){
print(eval(parse(text = paste0("levels(asset$",ele,")"))))
}
names(asset)
length(names(asset))
for(ele in names(asset)){
print(eval(parse(text = paste0("levels(asset$",ele,")"))))
}
for(ele in names(asset)){
print(eval(parse(text = paste0("levels(asset$",ele,")"))))
}
ele
names(asset)
asset$participation.respondent_repeat.19..age
levels(asset$participation.respondent_repeat.19..age)
runApp('Documents/Capstone/Zaatari-Project/map')
runApp('Documents/Capstone/Zaatari-Project/map')
runApp('Documents/Capstone/Zaatari-Project/map')
"data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))"
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset)
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
runApp('Documents/Capstone/Zaatari-Project/map')
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)   group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)
data.table(asset) %>% gather(type, district, collector.block_number)
help.search("gather")
library(tidyr)
data.table(asset) %>% gather(type, district, collector.block_number)
data.table(asset) %>% gather(type, district, collector.block_number)
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls) group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
runApp('Documents/Capstone/Zaatari-Project/map')
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
asset
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))"
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
runApp('Documents/Capstone/Zaatari-Project/map')
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True')
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)  group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls) \n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls) /n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls) \n group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.tiger_girls == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.tiger_girls)
runApp('Documents/Capstone/Zaatari-Project/map')
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club) \n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)\n        group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>% gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club) %>% group_by( asset, district, collector.block_number) %>% summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
data.table(asset) %>%
gather(type, district, collector.block_number, activities_hobbies_social.community_activity.children_club)
group_by( asset, district, collector.block_number) %>%
summarize(true_count = sum(activities_hobbies_social.community_activity.children_club == 'True'))
for(ele in names(asset)){
print(eval(parse(text = paste0("levels(asset$",ele,")"))))
}
for(ele in names(asset)){
print(eval(parse(text = paste0("levels(asset$",ele,")"))))
}
runApp()
shiny::runApp('Documents/Capstone/Zaatari-Project/map')
shiny::runApp('Documents/Projects/PredictIt/Shiny')
input$o_table_rows_selected
input$o_table_rows_selected
latest_price_table[3]
latest_price_table[3,]
latest_price_table[3,]
input$o_table_rows_selected
input$o_table_rows_selected
input$o_table_rows_selected[1]
input$o_table_rows_selected[2]
input$o_table_rows_selected[3]
runApp()
Q
runApp('Documents/Projects/PredictIt/Shiny')
runApp('Documents/Projects/PredictIt/Shiny')
shiny::runApp('Documents/Projects/Rwanda/Shiny')
train
test
library(lattice)
library(boot)
library(effects)
library(caTools)
library(randomForest)
library(rpart)
library(e1071)
library(nnet)
set.seed(95)
options(scipen=999)
#loading in the dataset and preprocessing data
rwanda                                                         <- read.csv("2017_survey_business_final.csv")
rwanda[rwanda$business_start == '########',]                   <- NA
rwanda$sell_food_assistance[rwanda$sell_food_assistance == ""] <- NA
rwanda$outside_job                                             <- as.numeric(rwanda$outside_job)
rwanda <- subset(rwanda, select=c("camp_name","num_employee","market_condition","market_security","cash_food_local",
"outside_job","competition", "income_compare","business_start", "customer_locations", "customer_locations_camp_change",
"entrepreneurship_training", "training_grow", "business_leave_camp" ,"leave_camp_support_business", "id_problem_fequency",
"key_good_demand_change","avg_customers","x", "y"))
mug <- rwanda[rwanda$camp_name == 'mugombwa',]
kim <- rwanda[rwanda$camp_name == 'kigeme',]
xyplot(avg_customers ~ business_start, data = rwanda,
ylab = "Average Number of Customers",
xlab = "Days Since Camp Opened",
main = "Average Number of Customer VS Days",
type = c("p","r"))
#linear regression, DV ~ IV, predicting num of employees from x and y, signficant
linear.model <- lm(num_employee ~ x + y , data = rwanda)
summary(linear.model)
#linear regression, DV ~ IV, predicting average customers from x and y, not signficant
linear.model1 <- lm(avg_customers ~ x + y , data = rwanda)
summary(linear.model1)
#linear regression, DV ~ IV, predicting business start from x and y, signifcant
linear.model2 <- lm(business_start ~ x + y, data = rwanda)
summary(linear.model2)
#dividing up the data into training and testing
sample <- sample.int(n = nrow(rwanda), size = floor(.75*nrow(rwanda)), replace = F)
train <- rwanda[sample, ]
test  <- rwanda[-sample, ]
train
test
nnet(competition ~ . , data = train)
nnet(competition ~ . , data = train, size = 2)
update.packages()
library(lattice)
library(boot)
library(effects)
library(caTools)
library(randomForest)
library(rpart)
library(e1071)
library(nnet)
setwd("~/Documents/Projects/myDigitRecognizer-master/DigitRecognizerApp")
shiny::runApp()
install.packages('coindeskr')
install.packages('dygraphs')
install.packages('coindeskr')
library(shiny) #To build the shiny App
library(coindeskr) #R-Package connecting to Coindesk API
library(dygraphs)
last31 <- get_last31days_price()
last31
library(shiny)
library(coindeskr)
library(dygraphs)
last31 <- get_last31days_price()
ui <- shinyUI(
fluidPage(
titlePanel('Bitcoin USD Price for Last 31 days'),
mainPanel(
h3('Minimum'),
h3(htmlOutput('minprice')),
h3('Maximum'),
h3(htmlOutput('maxprice')),
dygraphOutput("btcprice")
)
))
server <- function(input,output){
output$minprice <- renderText(
paste('Price : $', min(last31), '
Date :', rownames(last31)[which.min(last31$Price)] )
)
output$maxprice <- renderText(
paste('Price : $', max(last31), '
Date :', rownames(last31)[which.max(last31$Price)] )
)
output$btcprice <- renderDygraph(
dygraph(data = last31, main = "Bitcoin USD Price for Last 31 days") %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = FALSE, highlightSeriesOpts = list(strokeWidth = 3)) %>%
dyRangeSelector()
)
}
source('~/Documents/Projects/CoinDeskR/CoinDeskR/app.R', echo=TRUE)
app <- shinyApp(
ui <- shinyUI(
fluidPage(
titlePanel('Bitcoin USD Price for Last 31 days'),
mainPanel(
h3('Minimum'),
h3(htmlOutput('minprice')),
h3('Maximum'),
h3(htmlOutput('maxprice')),
dygraphOutput("btcprice")
)
)),
server <- function(input,output){
output$minprice <- renderText(
paste('Price : $', min(last31), '
Date :', rownames(last31)[which.min(last31$Price)] )
)
output$maxprice <- renderText(
paste('Price : $', max(last31), '
Date :', rownames(last31)[which.max(last31$Price)] )
)
output$btcprice <- renderDygraph(
dygraph(data = last31, main = "Bitcoin USD Price for Last 31 days") %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = FALSE, highlightSeriesOpts = list(strokeWidth = 3)) %>%
dyRangeSelector()
)
}),
runApp(app)
}
library(shiny)
library(coindeskr)
library(dygraphs)
last31 <- get_last31days_price()
app <- shinyApp(
ui <- shinyUI(
fluidPage(
titlePanel('Bitcoin USD Price for Last 31 days'),
mainPanel(
h3('Minimum'),
h3(htmlOutput('minprice')),
h3('Maximum'),
h3(htmlOutput('maxprice')),
dygraphOutput("btcprice")
)
)),
server <- function(input,output){
output$minprice <- renderText(
paste('Price : $', min(last31), '
Date :', rownames(last31)[which.min(last31$Price)] )
)
output$maxprice <- renderText(
paste('Price : $', max(last31), '
Date :', rownames(last31)[which.max(last31$Price)] )
)
output$btcprice <- renderDygraph(
dygraph(data = last31, main = "Bitcoin USD Price for Last 31 days") %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = FALSE, highlightSeriesOpts = list(strokeWidth = 3)) %>%
dyRangeSelector()
)
})
runApp(app)
shiny::runApp('Documents/Projects/SuRpriseMaps')
install.packages("maps")
install.packages("mapproj")
runApp('Documents/Projects/SuRpriseMaps')
counties <- readRDS("counties.rds")
setwd("~/Documents/Projects/SuRpriseMaps")
counties <- readRDS("counties.rds")
counties
percent_map()
runApp()
map
counties <- readRDS("counties.rds")
# Source helper functions -----
source("helpers.R")
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinythemes)      # Bootswatch color themes for shiny
library(choroplethr)      # Creating Choropleth Maps in R
library(choroplethrMaps)
install.packages("shinythemes")
install.packages("choroplethr")
install.packages("choroplethrMaps")
data('df_state_demographics')
library(shiny)
library(shinythemes)      # Bootswatch color themes for shiny
library(choroplethr)      # Creating Choropleth Maps in R
library(choroplethrMaps)
data('df_state_demographics')
library(choroplethrMaps)  # Maps used by the choroplethr package
data('df_state_demographics')
library(choroplethr)
data(df_state_demographics)
library(choroplethr)
data(df_state_demographic)
library(choroplethr)
data(df_state_demographics)
library(choroplethr)      # Creating Choropleth Maps in R
install.package("sf")
install.packages("sf")
library(choroplethr)      # Creating Choropleth Maps in R
library(choroplethr)      # Creating Choropleth Maps in R
install.packages("choroplethr")
library(choroplethr)      # Creating Choropleth Maps in R
install.packages("rgdal", repos = "http://cran.us.r-project.org", type = "source")
install.packages("rgdal", repos = "http://cran.us.r-project.org", type = "source")
install.packages("rgdal", repos = "http://cran.us.r-project.org", type = "source")
library(choroplethr)      # Creating Choropleth Maps in R
install.packages("sf", repos = "http://cran.us.r-project.org", type = "source")
install.packages("choroplethr")
library(choroplethr)      # Creating Choropleth Maps in R
library(sf)
install.packages("sf")
installed.packages("gdal")
install.packages("gdal")
library(installr)
updateR()
install.packages("installr")
install.packages("gdal")
install.packages("gdal", type = "source")
install.packages("choroplethr", dependencies = TRUE)
library(choroplethr)      # Creating Choropleth Maps in R
install.packages("sf", dependencies = TRUE)
library(choroplethr)      # Creating Choropleth Maps in R
